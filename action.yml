name: 'Copyright Infringement Detection'
description: 'Detects copyright infringement in pull requests using AI analysis'
author: 'NTT Inc.'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  aacs-url:
    description: 'AACS API endpoint URL'
    required: true
  aacs-api-key:
    description: 'AACS API key'
    required: true
  huggingface-token:
    description: 'Hugging Face token for model access'
    required: true
  container-registry:
    description: 'Container registry (default: ghcr.io)'
    required: false
    default: 'ghcr.io'
  image-name:
    description: 'Container image name'
    required: false
    default: 'copyright-checker'
  pr-number:
    description: 'Pull request number (auto-detected if not provided)'
    required: false

outputs:
  result:
    description: 'Analysis result'
    value: ${{ steps.analysis.outputs.result }}
  violations-found:
    description: 'Whether violations were found'
    value: ${{ steps.analysis.outputs.violations-found }}

runs:
  using: 'composite'
  steps:
    - name: Enable Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.container-registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Generate Container Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.container-registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}
        tags: |
          type=raw,value=latest
          type=sha,prefix=,suffix=,format=short

    - name: Build and Push Container Image
      uses: docker/build-push-action@v5
      with:
        context: ${{ github.action_path }}
        file: ${{ github.action_path }}/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ inputs.container-registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}:buildcache
        cache-to: type=registry,ref=${{ inputs.container-registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}:buildcache,mode=max

    - name: Run Copyright Infringement Analysis
      id: analysis
      shell: bash
      run: |
        # Get PR number from input or event
        PR_NUM="${{ inputs.pr-number }}"
        if [[ -z "$PR_NUM" || "$PR_NUM" == "" ]]; then
          PR_NUM="${{ github.event.pull_request.number }}"
        fi
        
        # Validate PR number exists
        if [[ -z "$PR_NUM" || "$PR_NUM" == "" ]]; then
          echo "ERROR: Could not determine PR number"
          echo "Input pr-number: '${{ inputs.pr-number }}'"
          echo "Event PR number: '${{ github.event.pull_request.number }}'"
          echo "Event name: '${{ github.event_name }}'"
          exit 1
        fi
        
        echo "Running copyright infringement detection for PR #$PR_NUM"
        echo "Using container image: ${{ steps.meta.outputs.tags }}"
        echo "Container registry: ${{ inputs.container-registry }}"
        echo "GitHub event: ${{ github.event_name }}"
        
        # Debug: Check if container image exists and contents
        echo "=== Container Contents Debug ==="
        docker run --rm ${{ steps.meta.outputs.tags }} ls -la /app/ || echo "Container or files not found"
        
        echo "=== Starting Analysis ==="
        docker run --rm \
          -e GITHUB_TOKEN="${{ inputs.github-token }}" \
          -e AACS="${{ inputs.aacs-url }}" \
          -e AACSAPIkey="${{ inputs.aacs-api-key }}" \
          -e HUGGINGFACE_TOKEN="${{ inputs.huggingface-token }}" \
          -e GITHUB_REPOSITORY="${{ github.repository }}" \
          -e GITHUB_HEAD_REF="${{ github.head_ref }}" \
          -e GITHUB_BASE_REF="${{ github.base_ref }}" \
          -v ${{ github.workspace }}:/workspace \
          -w /app \
          ${{ steps.meta.outputs.tags }} \
          bash -c "
            echo 'Container environment:'
            echo 'Working directory:' \$(pwd)
            echo 'Available files in /app:' && ls -la /app/
            echo 'Available files in /workspace:' && ls -la /workspace/ | head -10
            echo 'PR Number to be passed:' $PR_NUM
            git config --global --add safe.directory /workspace
            cd /workspace
            python3 /app/gitDiffCheck.py $PR_NUM
          "