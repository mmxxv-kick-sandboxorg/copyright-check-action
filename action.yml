name: 'Copyright Infringement Detection'
description: 'Detects copyright infringement in pull requests using AI analysis'
author: 'NTT Inc.'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
  aacs-url:
    description: 'AACS API endpoint URL'
    required: true
  aacs-api-key:
    description: 'AACS API key'
    required: true
  huggingface-token:
    description: 'Hugging Face token for model access'
    required: true
  container-registry:
    description: 'Container registry (default: ghcr.io)'
    required: false
    default: 'ghcr.io'
  image-name:
    description: 'Container image name'
    required: false
    default: 'copyright-checker'
  pr-number:
    description: 'Pull request number (auto-detected if not provided)'
    required: false

outputs:
  result:
    description: 'Analysis result'
    value: ${{ steps.analysis.outputs.result }}
  violations-found:
    description: 'Whether violations were found'
    value: ${{ steps.analysis.outputs.violations-found }}

runs:
  using: 'composite'
  steps:
    - name: 1. Enable Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 2. Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.container-registry }}
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: 3. Generate Container Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.container-registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}
        tags: |
          type=raw,value=latest
          type=sha,prefix=,suffix=,format=short

    - name: 4. Build and Push Container Image
      uses: docker/build-push-action@v5
      with:
        context: ${{ github.action_path }}
        file: ${{ github.action_path }}/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ inputs.container-registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}:buildcache
        cache-to: type=registry,ref=${{ inputs.container-registry }}/${{ github.repository_owner }}/${{ inputs.image-name }}:buildcache,mode=max

    - name: 5. Run Copyright Infringement Analysis
      id: analysis
      shell: bash
      env:
        # Set environment variables at step level to ensure they're available
        INPUT_PR_NUMBER: ${{ inputs.pr-number }}
        EVENT_PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_TOKEN_VAR: ${{ inputs.github-token }}
        AACS_VAR: ${{ inputs.aacs-url }}
        AACS_KEY_VAR: ${{ inputs.aacs-api-key }}
        HF_TOKEN_VAR: ${{ inputs.huggingface-token }}
      run: |
        echo "=== Debug GitHub Variables ==="
        echo "Input PR number: '$INPUT_PR_NUMBER'"
        echo "Event PR number: '$EVENT_PR_NUMBER'"
        echo "GitHub event: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        
        # Determine PR number with fallback
        if [[ -n "$INPUT_PR_NUMBER" && "$INPUT_PR_NUMBER" != "null" && "$INPUT_PR_NUMBER" != "" ]]; then
          FINAL_PR_NUMBER="$INPUT_PR_NUMBER"
          echo "✅ Using PR number from input: $FINAL_PR_NUMBER"
        elif [[ -n "$EVENT_PR_NUMBER" && "$EVENT_PR_NUMBER" != "null" && "$EVENT_PR_NUMBER" != "" ]]; then
          FINAL_PR_NUMBER="$EVENT_PR_NUMBER"
          echo "✅ Using PR number from event: $FINAL_PR_NUMBER"
        else
          echo "❌ ERROR: No PR number available from any source"
          echo "Available environment variables:"
          env | grep -E "(INPUT_|EVENT_|GITHUB_)" | sort
          exit 1
        fi
        
        echo "=== Container Contents Debug ==="
        docker run --rm ${{ steps.meta.outputs.tags }} ls -la /app/ || echo "Container or files not found"
        
        echo "=== Running Analysis with PR #$FINAL_PR_NUMBER ==="
        docker run --rm \
          -e GITHUB_TOKEN="$GITHUB_TOKEN_VAR" \
          -e AACS="$AACS_VAR" \
          -e AACSAPIkey="$AACS_KEY_VAR" \
          -e HUGGINGFACE_TOKEN="$HF_TOKEN_VAR" \
          -e GITHUB_REPOSITORY="${{ github.repository }}" \
          -e GITHUB_HEAD_REF="${{ github.head_ref }}" \
          -e GITHUB_BASE_REF="${{ github.base_ref }}" \
          -e PR_NUMBER="$FINAL_PR_NUMBER" \
          -v ${{ github.workspace }}:/workspace \
          -w /app \
          ${{ steps.meta.outputs.tags }} \
          bash -c "
            echo '=== Container Debug Info ==='
            echo 'Working directory: ' \$(pwd)
            echo 'Available files in /app:'
            ls -la /app/
            echo 'PR Number from environment: ' \$PR_NUMBER
            echo 'GitHub Repository: ' \$GITHUB_REPOSITORY
            echo 'Environment variables containing PR or GITHUB:'
            env | grep -iE '(pr|github)' | sort
            echo '=== Starting Script ==='
            git config --global --add safe.directory /workspace
            cd /workspace
            python3 /app/testScript.py

          "
